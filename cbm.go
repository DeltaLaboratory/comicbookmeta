// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package cbm

import "fmt"
import "reflect"
import "encoding/json"

// Metadata Schema for Comic Book Metadata
type CbmSchemaJson struct {
	// The authors of the comic book
	Authors []CbmSchemaJsonAuthorsElem `json:"authors,omitempty"`

	// The date of distribution of the comic book
	DistributedDate *string `json:"distributed_date,omitempty"`

	// The distributor of the comic book
	Distributor *string `json:"distributor,omitempty"`

	// The identifiers of the comic book
	Identifiers []CbmSchemaJsonIdentifiersElem `json:"identifiers"`

	// The language of the comic book in ISO 639-1 format
	Language *string `json:"language,omitempty"`

	// The date of publication of the comic book
	PublishedDate *string `json:"published_date,omitempty"`

	// The publisher of the comic book
	Publisher *string `json:"publisher,omitempty"`

	// The read direction of the comic book
	ReadDirection CbmSchemaJsonReadDirection `json:"read_direction"`

	// The series data of the comic book
	Series *CbmSchemaJsonSeries `json:"series,omitempty"`

	// The tags of the comic book
	Tags []string `json:"tags,omitempty"`

	// The title of the comic book
	Title string `json:"title"`
}

type CbmSchemaJsonAuthorsElem struct {
	// The identifier of the author
	Identifier *string `json:"identifier,omitempty"`

	// The name of the author
	Name string `json:"name"`

	// The role of the author
	Role *CbmSchemaJsonAuthorsElemRole `json:"role,omitempty"`
}

type CbmSchemaJsonAuthorsElemRole string

const CbmSchemaJsonAuthorsElemRoleAuthor CbmSchemaJsonAuthorsElemRole = "author"
const CbmSchemaJsonAuthorsElemRoleEditor CbmSchemaJsonAuthorsElemRole = "editor"
const CbmSchemaJsonAuthorsElemRoleIllustrator CbmSchemaJsonAuthorsElemRole = "illustrator"
const CbmSchemaJsonAuthorsElemRoleTranslator CbmSchemaJsonAuthorsElemRole = "translator"

type CbmSchemaJsonIdentifiersElem struct {
	// The type of the identifier
	Type CbmSchemaJsonIdentifiersElemType `json:"type"`

	// The value of the identifier
	Value string `json:"value"`
}

type CbmSchemaJsonIdentifiersElemType string

const CbmSchemaJsonIdentifiersElemTypeArxiv CbmSchemaJsonIdentifiersElemType = "arxiv"
const CbmSchemaJsonIdentifiersElemTypeDoi CbmSchemaJsonIdentifiersElemType = "doi"
const CbmSchemaJsonIdentifiersElemTypeHandle CbmSchemaJsonIdentifiersElemType = "handle"
const CbmSchemaJsonIdentifiersElemTypeIsbn CbmSchemaJsonIdentifiersElemType = "isbn"
const CbmSchemaJsonIdentifiersElemTypeIssn CbmSchemaJsonIdentifiersElemType = "issn"
const CbmSchemaJsonIdentifiersElemTypeOrcid CbmSchemaJsonIdentifiersElemType = "orcid"
const CbmSchemaJsonIdentifiersElemTypePmcid CbmSchemaJsonIdentifiersElemType = "pmcid"
const CbmSchemaJsonIdentifiersElemTypePmid CbmSchemaJsonIdentifiersElemType = "pmid"
const CbmSchemaJsonIdentifiersElemTypeUrl CbmSchemaJsonIdentifiersElemType = "url"
const CbmSchemaJsonIdentifiersElemTypeUrn CbmSchemaJsonIdentifiersElemType = "urn"
const CbmSchemaJsonIdentifiersElemTypeWikidata CbmSchemaJsonIdentifiersElemType = "wikidata"

type CbmSchemaJsonReadDirection string

const CbmSchemaJsonReadDirectionBtt CbmSchemaJsonReadDirection = "btt"
const CbmSchemaJsonReadDirectionLtr CbmSchemaJsonReadDirection = "ltr"
const CbmSchemaJsonReadDirectionRtl CbmSchemaJsonReadDirection = "rtl"
const CbmSchemaJsonReadDirectionTtb CbmSchemaJsonReadDirection = "ttb"

// The series data of the comic book
type CbmSchemaJsonSeries struct {
	// The identifier of the series
	Identifier *string `json:"identifier,omitempty"`

	// The number of the comic book in the series
	Index int `json:"index"`

	// The parent series data of the comic book
	Parent *CbmSchemaJsonSeriesParent `json:"parent,omitempty"`

	// The title of the series
	Title string `json:"title"`
}

// The parent series data of the comic book
type CbmSchemaJsonSeriesParent struct {
	// The identifier of the parent series
	Identifier *string `json:"identifier,omitempty"`

	// The title of the parent series
	Title string `json:"title"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CbmSchemaJsonReadDirection) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CbmSchemaJsonReadDirection {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CbmSchemaJsonReadDirection, v)
	}
	*j = CbmSchemaJsonReadDirection(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CbmSchemaJsonIdentifiersElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CbmSchemaJsonIdentifiersElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CbmSchemaJsonIdentifiersElemType, v)
	}
	*j = CbmSchemaJsonIdentifiersElemType(v)
	return nil
}

var enumValues_CbmSchemaJsonReadDirection = []interface{}{
	"ltr",
	"rtl",
	"ttb",
	"btt",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CbmSchemaJsonAuthorsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain CbmSchemaJsonAuthorsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CbmSchemaJsonAuthorsElem(plain)
	return nil
}

var enumValues_CbmSchemaJsonIdentifiersElemType = []interface{}{
	"isbn",
	"issn",
	"doi",
	"pmid",
	"pmcid",
	"arxiv",
	"wikidata",
	"orcid",
	"handle",
	"url",
	"urn",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CbmSchemaJsonAuthorsElemRole) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CbmSchemaJsonAuthorsElemRole {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CbmSchemaJsonAuthorsElemRole, v)
	}
	*j = CbmSchemaJsonAuthorsElemRole(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CbmSchemaJsonSeriesParent) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["title"]; !ok || v == nil {
		return fmt.Errorf("field title: required")
	}
	type Plain CbmSchemaJsonSeriesParent
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CbmSchemaJsonSeriesParent(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CbmSchemaJsonIdentifiersElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	if v, ok := raw["value"]; !ok || v == nil {
		return fmt.Errorf("field value: required")
	}
	type Plain CbmSchemaJsonIdentifiersElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CbmSchemaJsonIdentifiersElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CbmSchemaJsonSeries) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["index"]; !ok || v == nil {
		return fmt.Errorf("field index: required")
	}
	if v, ok := raw["title"]; !ok || v == nil {
		return fmt.Errorf("field title: required")
	}
	type Plain CbmSchemaJsonSeries
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CbmSchemaJsonSeries(plain)
	return nil
}

var enumValues_CbmSchemaJsonAuthorsElemRole = []interface{}{
	"author",
	"editor",
	"illustrator",
	"translator",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CbmSchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["identifiers"]; !ok || v == nil {
		return fmt.Errorf("field identifiers: required")
	}
	if v, ok := raw["read_direction"]; !ok || v == nil {
		return fmt.Errorf("field read_direction: required")
	}
	if v, ok := raw["title"]; !ok || v == nil {
		return fmt.Errorf("field title: required")
	}
	type Plain CbmSchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CbmSchemaJson(plain)
	return nil
}
